--- origsrc/extra-cmake-modules-5.9.0/kde-modules/KDECMakeSettings.cmake	2015-04-04 03:52:03.000000000 -0500
+++ src/extra-cmake-modules-5.9.0/kde-modules/KDECMakeSettings.cmake	2015-04-24 10:42:11.315548700 -0500
@@ -179,7 +179,7 @@ if(NOT KDE_SKIP_BUILD_SETTINGS)
    # one common directory, and all static|import libraries and plugins
    # into another one. This way test executables can find their dlls
    # even without installation.
-   if(WIN32)
+   if(WIN32 OR CYGWIN)
       set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")
       set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
       set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
--- origsrc/extra-cmake-modules-5.9.0/kde-modules/KDECompilerSettings.cmake	2015-04-04 03:52:03.000000000 -0500
+++ src/extra-cmake-modules-5.9.0/kde-modules/KDECompilerSettings.cmake	2015-04-24 10:43:52.505398200 -0500
@@ -179,7 +179,7 @@ if ("${CMAKE_C_COMPILER_ID}" STREQUAL "G
     set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -std=iso9899:1990")
 endif()
 if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")
 elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel" AND NOT WIN32)
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
 endif()
@@ -199,7 +199,7 @@ endif()
 set(CMAKE_CXX_VISIBILITY_PRESET hidden)
 set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)
 
-if (UNIX AND NOT APPLE)
+if (UNIX AND NOT APPLE AND NOT CYGWIN)
     # Enable adding DT_RUNPATH, which means that LD_LIBRARY_PATH takes precedence
     # over the built-in rPath
     set(CMAKE_SHARED_LINKER_FLAGS "-Wl,--enable-new-dtags ${CMAKE_SHARED_LINKER_FLAGS}")
